name: Build and release a provider

on:
  workflow_call:
    inputs:
      name:
        description: Provider name
        required: true
        type: string
    secrets:
      subject:
        required: true
        description: Capability provider issuer subject key
      issuer:
        required: true
        description: Capability provider issuer key
env:
  REGISTRY: ghcr.io
  REPOSITORY: ${{ github.repository }}
jobs:
  build:
    strategy:
      matrix:
        arch: ["x86_64", "aarch64"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: goto-bus-stop/setup-zig@v2

      - name: Add musl targets
        run: |
          rustup target add ${{ matrix.arch }}-unknown-linux-musl

      - name: Install cargo-zigbuild
        run: |
          cargo install cargo-zigbuild

      - name: Build
        run: |
          cargo zigbuild --release --target ${{matrix.arch}}-unknown-linux-musl
          name=$(echo ${{inputs.name}} | tr '-' '_')
          mv target/${{matrix.arch}}-unknown-linux-musl/release/$name ${{inputs.name}}
        working-directory: ${{inputs.name}}

      - name: Store artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{inputs.name}}-${{matrix.arch}}
          path: ${{inputs.name}}/${{inputs.name}}
  release:
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/${{inputs.name}}-v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Extract tag context
        id: ctx
        run: |
          sha_short=$(git rev-parse --short HEAD)
          echo "owner=${GITHUB_REPOSITORY_OWNER,,}" >> "$GITHUB_OUTPUT"
          echo "sha_short=${sha_short}" >> "$GITHUB_OUTPUT"
          echo "version=${GITHUB_REF#refs/tags/${{inputs.name}}v}" >> "$GITHUB_OUTPUT"
          echo "artifact_name=$(echo ${{inputs.name}} | tr '- "')" >> "$GITHUB_OUTPUT"
      - uses: taiki-e/install-action@v2
        with:
          tool: wash-cli@0.28.0

      # Used later in the build process to push provenance info
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: imjasonh/setup-crane@v0.1

      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Fix permissions and architectures
        run: |
          tree artifacts
          mv artifacts/${{inputs.name}}-x86_64/${{inputs.name}} ${{inputs.name}}-x86_64
          mv artifacts/${{inputs.name}}-aarch64/${{inputs.name}} ${{inputs.name}}-aarch64
          chmod +x ${{inputs.name}}-*

      - name: Push
        env:
          WASH_REG_USER: ${{ github.repository_owner }}
          WASH_REG_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
          WASH_ISSUER_KEY: ${{ secrets.subject}}
          WASH_SUBJECT_KEY: ${{ secrets.issuer}}
        run: |
          if [ -z $WASH_SUBJECT_KEY ]; then
            echo "WASH_SUBJECT_KEY is required"
            exit 1
          fi

          if [ -z $WASH_ISSUER_KEY ]; then
            echo "WASH_ISSUER_KEY is required"
            exit 1
          fi

          wash par create \
          --binary "${{ inputs.name }}-x86_64" \
          --compress \
          --destination "${{ inputs.name }}.par.gz" \
          --name "${{ inputs.name }}-provider" \
          --vendor cosmonic-labs \
          --version ${{ steps.ctx.outputs.version }}

          wash par insert --arch aarch64-linux --binary "${{inputs.name }}-aarch64" "${{ inputs.name }}.par.gz"

          wash push ${{env.REGISTRY}}/${{env.REPOSITORY}}/${{inputs.name}}:$GITHUB_SHA ${{inputs.name}}.par.gz
          wash push ${{env.REGISTRY}}/${{env.REPOSITORY}}/${{inputs.name}}:$(git rev-parse --short HEAD) ${{inputs.name}}.par.gz
          wash push ${{env.REGISTRY}}/${{env.REPOSITORY}}/${{inputs.name}}:${{steps.ctx.outputs.version}} ${{inputs.name}}.par.gz

      - name: Get digest
        id: digest
        run: |
          digest=$(crane digest ${{env.REGISTRY}}/${{env.REPOSITORY}}/${{inputs.name}}:$GITHUB_SHA)
          echo "digest=$digest" >> "$GITHUB_OUTPUT"

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{env.REGISTRY}}/${{env.REPOSITORY}}/${{inputs.name}}
          subject-digest: ${{ steps.digest.outputs.digest }}
          push-to-registry: true
